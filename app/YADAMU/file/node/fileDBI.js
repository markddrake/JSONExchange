"use strict" 
const fs = require('fs');
const path = require('path');

const YadamuDBI = require('../../common/yadamuDBI.js');
const FileWriter = require('./fileWriter.js');
const JSONParser = require('./jsonParser.js');
const EventManager = require('./eventManager.js')
/*
**
** YADAMU Database Inteface class skeleton
**
*/

class FileDBI extends YadamuDBI {
 
  /*
  **
  ** !!! For the FileDBI an export operaton involves reading data from the file system and an Import operation involves writing data to the file system !!!
  **
  */

  getConnectionProperties() {
    return {}
  }
  
  exportComplete(message) {
	this.eventManager.exportComplete(message);
  }
  
  closeInputStream() {      
    this.inputStream.close();
  }

  closeOutputStream() {
     return new Promise((resolve,reject) => {
      this.outputStream.on('finish',() => { resolve() });
      this.outputStream.close();
    })

  }
  
  // Override YadamuDBI - Any DDL is considered valid and written to the export file.
  
  isValidDDL() {
    return true;
  }
  
  // Override YadamuDBI
  
  isDatabase() {
    return false;
  }
  
  // Override YadamuDBI

  objectMode() {
     return false;  
  }

  async getMetadata() {
	return []
  }
  
  async getSystemInformation() {
	return {}
  }

  async setSystemInformation(systemInformation) {
	super.setSystemInformation(systemInformation) 
    if (this.outputStream !== undefined) {
      this.outputStream.write(`"systemInformation":${JSON.stringify(this.systemInformation)}`);
	}
  }
  
  setMetadata(metadata) {
	super.setMetadata(metadata)
    if (this.outputStream !== undefined) {
  	  this.outputStream.write(',');
      this.outputStream.write(`"metadata":${JSON.stringify(this.metadata)}`);
	}
  }
 
  get DATABASE_VENDOR()    { return 'FILE' };
  get SOFTWARE_VENDOR()    { return 'N/A' };
  get SPATIAL_FORMAT()     { return this.spatialFormat };
  get DEFAULT_PARAMETERS() { return this.yadamu.getYadamuDefaults().file }
    
  async releaseConnection() {
  }
  
  constructor(yadamu,exportFilePath) {
    super(yadamu,yadamu.getYadamuDefaults().file )
	this.exportFilePath = exportFilePath
    this.outputStream = undefined;
    this.inputStream = undefined;
	this.ddl = undefined;
    this.firstTable = true;
  }

  generateStatementCache() {
	this.statementCache = {}
  }
      
  async executeDDL(ddl) {
    this.outputStream.write(',');
    this.outputStream.write(`"ddl":${JSON.stringify(ddl)}`);
  }

  async initialize() {
    super.initialize(false);
    this.spatialFormat = this.parameters.SPATIAL_FORMAT ? this.parameters.SPATIAL_FORMAT : super.SPATIAL_FORMAT
	this.exportFilePath = this.exportFilePath === undefined ? this.parameters.FILE : this.exportFilePath
	this.exportFilePath =  path.resolve(this.exportFilePath)
  }

  async initializeExport() {
	// this.yadamuLogger.trace([this.constructor.name],`initializeExport()`)
	super.initializeExport();
    this.inputStream = fs.createReadStream(this.exportFilePath);
  }

  async finalizeExport() {
 	// this.yadamuLogger.trace([this.constructor.name,],'finalizeExport()')
	this.closeInputStream()
  }
  
  async initializeImport() {
	// For FileDBI Import is Writing data to the file system.
    // this.yadamuLogger.trace([this.constructor.name],`initializeImport()`)
	super.initializeImport()
    this.outputStream = fs.createWriteStream(this.exportFilePath);
    this.yadamuLogger.info([this.DATABASE_VENDOR],`Writing file "${this.exportFilePath}".`)
	this.outputStream.write(`{`)
  }

  async initializeData() {
    this.outputStream.write(',');
    this.outputStream.write('"data":{'); 
  }
  
  async finalizeData() {
	// this.yadamuLogger.trace([this.constructor.name],`finalizeData()`)
	this.outputStream.write('}');
  }  
  
  async finalizeImport() {
    // this.yadamuLogger.trace([this.constructor.name],`finalizeImport()`)
	this.outputStream.write('}');
  }
    
  async finalize() {
    if (this.inputStream !== undefined) {
      await this.closeInputStream()
    }
    if (this.outputStream !== undefined) {
      await this.closeOutputStream()
    }
  }


  /*
  **
  **  Abort the database connection.
  **
  */

  async abort() {

    try {
      if (this.inputStream !== undefined) {
        await this.closeInputStream()
	  }
    } catch (err) {
      this.yadamuLogger.handleException([`${this.DATABASE_VENDOR}`,'ABORT','InputStream'],err);
    }
	 
    try {
      if (this.outputStream !== undefined) {
        await this.closeOutputStream()
	  }
    } catch (err) {
      this.yadamuLogger.handleException([`${this.DATABASE_VENDOR}`,'ABORT','OutputStream'],err);
    }
  }

  /*
  **
  **  Generate a set of DDL operations from the metadata generated by an Export operation
  **
  */
  
      
  async generateStatementCache(schema,executeDDL) {

    this.statementCache = []
  }

  async getDDLOperations() {
    return []
  }
  
  async getSchemaInfo(schema) {
    return []
  }
  
  getTableInfo(tableName) {
	
    if (tableName === null) {
	  // Hack to enable statisticsCollector to use the YadamuWriter interface to collect statistics about the cotnents of a YADAMU export file...
      return {}
    }
	  
    // Include a dummy dataTypes array of the correct length to ensure the column count assertion does not throw
	return { 
	  tableName : tableName
    , dataTypes : new Array(this.metadata[tableName].dataTypes.length).fill(null)
    }
  }

  getInputStream() {  
    // Return an Event Stream based on processing the inputStream with the JSONParser class
    const stats = fs.statSync(this.exportFilePath)
    const fileSizeInBytes = stats.size
    this.yadamuLogger.info([this.DATABASE_VENDOR],`Processing file "${this.exportFilePath}". Size ${fileSizeInBytes} bytes.`)
    const jsonParser  = new JSONParser(this.yadamuLogger,this.parameters.MODE);
    const eventManager = new EventManager(this.yadamu)
	this.eventStream = this.inputStream.pipe(jsonParser).pipe(eventManager)
	return this.eventStream;
  }
    
  getOutputStream(tableName) {
    // this.yadamuLogger.trace([this.constructor.name],`getOutputStream(${tableName},${this.firstTable})`)
    // Override parent method to allow output stream to be passed to worker
    // return super.getOutputStream(FileWriter,primary)
	const os =  new FileWriter(this,tableName,this.status,this.yadamuLogger,this.firstTable,this.outputStream)
	this.firstTable = false;
    return os;
  }
  
}

module.exports = FileDBI
